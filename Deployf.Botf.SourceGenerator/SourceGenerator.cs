using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace  Deployf.Botf.SourceGenerators;

[Generator]
public class HelloSourceGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        StringBuilder code = new StringBuilder();
        code.AppendLine($@"// <auto-generated/>
using System;

namespace Deployf.Botf
{{
    public static class Routes
    {{");
        
        var compilation = context.Compilation;
        var actionAttribute = compilation.GetTypeByMetadataName("Deployf.Botf.ActionAttribute");
        foreach (var syntaxTree in compilation.SyntaxTrees)
        {
            var semantic = compilation.GetSemanticModel(syntaxTree);
            var methodSyntaxes = syntaxTree.GetRoot(context.CancellationToken).DescendantNodesAndSelf()
                .OfType<MethodDeclarationSyntax>();

            foreach (var methodSyntac in methodSyntaxes)
            {
                var method = (IMethodSymbol)ModelExtensions.GetDeclaredSymbol(semantic, methodSyntac, context.CancellationToken)!;
                var attributes = method.GetAttributes();
                var first = attributes.FirstOrDefault(a => a.AttributeClass == actionAttribute);
                if (first == null)
                {
                    continue;
                }

                code.AppendLine($"       // {method.Name} = {TypedConstantExtensions.ToCSharpString(first.ConstructorArguments.First())}");
            }

        }
        // Find the main method
        var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

        // Build up the source code
        code.AppendLine(@"
   }
}");
        
        // Add the source code to the compilation
        context.AddSource($"Routes.g.cs", code.ToString());
    }

    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this one
    }
}